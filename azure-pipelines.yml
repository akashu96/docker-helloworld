trigger:
  branches:
    include:
    - main
    - develop
  tags:
    include:
    - 'v*'

pr:
  branches:
    include:
    - main

variables:
  dockerImageName: 'hello-world-app'
  containerRegistry: 'your-acr.azurecr.io'
  imageRepository: 'hello-world-app'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build and Test
  jobs:
  - job: Build
    displayName: Build Docker Image
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build Docker image
      inputs:
        command: 'build'
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: Test Docker container
      inputs:
        command: 'run'
        arguments: '-d -p 8080:80 --name test-container $(imageRepository):$(tag)'

    - script: |
        sleep 10
        curl -f http://localhost:8080
      displayName: 'Test application'

    - task: Docker@2
      displayName: Stop test container
      inputs:
        command: 'stop'
        arguments: 'test-container'

- stage: SecurityScan
  displayName: Security Scanning
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: SecurityScan
    displayName: Container Security Scan
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build image for scanning
      inputs:
        command: 'build'
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        tags: 'scan'

    - script: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image $(imageRepository):scan
      displayName: 'Run Trivy security scan'

- stage: Push
  displayName: Push to Registry
  dependsOn: SecurityScan
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/tags/')))
  jobs:
  - job: Push
    displayName: Push Docker Image
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build and push image
      inputs:
        command: 'buildAndPush'
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: 'ACR-Connection'
        tags: |
          $(tag)
          latest

- stage: DeployStaging
  displayName: Deploy to Staging
  dependsOn: Push
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployStaging
    displayName: Deploy to Staging Environment
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubectlInstaller@0
            displayName: 'Install kubectl'
            inputs:
              kubectlVersion: 'latest'

          - task: Kubernetes@1
            displayName: 'Set kubectl context'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'staging-k8s-connection'
              command: 'login'

          - script: |
              chmod +x scripts/deploy-staging.sh
              export REGISTRY=$(containerRegistry)
              export IMAGE_NAME=$(imageRepository)
              ./scripts/deploy-staging.sh $(tag)
            displayName: 'Deploy to Staging'

          - task: Kubernetes@1
            displayName: 'Get staging service status'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'staging-k8s-connection'
              command: 'get'
              arguments: 'services -n staging'

- stage: DeployProduction
  displayName: Deploy to Production
  dependsOn: Push
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  jobs:
  - deployment: DeployProduction
    displayName: Deploy to Production Environment
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubectlInstaller@0
            displayName: 'Install kubectl'
            inputs:
              kubectlVersion: 'latest'

          - task: Kubernetes@1
            displayName: 'Set kubectl context'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'production-k8s-connection'
              command: 'login'

          - script: |
              chmod +x scripts/deploy-production.sh
              export REGISTRY=$(containerRegistry)
              export IMAGE_NAME=$(imageRepository)
              ./scripts/deploy-production.sh $(tag)
            displayName: 'Deploy to Production'

          - task: Kubernetes@1
            displayName: 'Verify production deployment'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'production-k8s-connection'
              command: 'get'
              arguments: 'pods,services,ingress -n production'

          - task: SlackNotification@1
            displayName: 'Notify Slack of successful deployment'
            inputs:
              SlackApiToken: '$(slack-api-token)'
              Channel: '#deployments'
              Message: 'ðŸš€ Production deployment successful! Version: $(tag) is now live at https://hello-world.example.com'
            condition: succeeded()
